/**
 * Site header
 */
.site-header {
  border-top: 5px solid $border-color-03;
  border-bottom: 1px solid $border-color-01;
  min-height: $spacing-unit * 1.865;
  line-height: $base-line-height * $base-font-size * 2.25;

  // Positioning context for the mobile navigation icon
  position: relative;
}

.site-title {
  @include relative-font-size(1.625);
  font-weight: 300;
  letter-spacing: -1px;
  margin-bottom: 0;
  float: left;

  @include media-query($on-palm) {
    padding-right: 45px;
  }

  &,
  &:visited {
    color: $site-title-color;
  }
}

.site-nav {
  position: absolute;
  top: 9px;
  right: $spacing-unit / 2;
  background-color: $background-color;
  border: 1px solid $border-color-01;
  border-radius: 5px;
  text-align: right;

  .nav-trigger {
    display: none;
  }

  .menu-icon {
    float: right;
    width: 36px;
    height: 26px;
    line-height: 0;
    padding-top: 10px;
    text-align: center;

    > svg path {
      fill: $border-color-03;
    }
  }

  label[for="nav-trigger"] {
    display: block;
    float: right;
    width: 36px;
    height: 36px;
    z-index: 2;
    cursor: pointer;
  }

  input ~ .trigger {
    clear: both;
    display: none;
  }

  input:checked ~ .trigger {
    display: block;
    padding-bottom: 5px;
  }

  .page-link {
    color: $text-color;
    line-height: $base-line-height;
    display: block;
    padding: 5px 10px;

    // Gaps between nav items, but not on the last one
    &:not(:last-child) {
      margin-right: 0;
    }
    margin-left: 20px;
  }


  @media screen and (min-width: $on-medium) {
    position: static;
    float: right;
    border: none;
    background-color: inherit;

    label[for="nav-trigger"] {
      display: none;
    }

    .menu-icon {
      display: none;
    }

    input ~ .trigger {
      display: block;
    }

    .page-link {
      display: inline;
      padding: 0;

      &:not(:last-child) {
        margin-right: 20px;
      }
      margin-left: auto;
    }
  }
}



/**
 * Site footer
 */
.site-footer {
  border-top: 1px solid $border-color-01;
  padding: $spacing-unit 0;
}

.footer-heading {
  @include relative-font-size(1.125);
  margin-bottom: $spacing-unit / 2;
}

.feed-subscribe .svg-icon {
  padding: 5px 5px 2px 0
}

.contact-list,
.social-media-list {
  list-style: none;
  margin-left: 0;
}

.footer-col-wrapper,
.social-links {
  @include relative-font-size(0.9375);
  color: $brand-color;
}

.footer-col {
  margin-bottom: $spacing-unit / 2;
}

.footer-col-1,
.footer-col-2 {
  width: calc(50% - (#{$spacing-unit} / 2));
}

.footer-col-3 {
  width: calc(100% - (#{$spacing-unit} / 2));
}

@media screen and (min-width: $on-large) {
  .footer-col-1 {
    width: calc(35% - (#{$spacing-unit} / 2));
  }

  .footer-col-2 {
    width: calc(20% - (#{$spacing-unit} / 2));
  }

  .footer-col-3 {
    width: calc(45% - (#{$spacing-unit} / 2));
  }
}

@media screen and (min-width: $on-medium) {
  .footer-col-wrapper {
    display: flex
  }

  .footer-col {
    width: calc(100% - (#{$spacing-unit} / 2));
    padding: 0 ($spacing-unit / 2);

    &:first-child {
      padding-right: $spacing-unit / 2;
      padding-left: 0;
    }

    &:last-child {
      padding-right: 0;
      padding-left: $spacing-unit / 2;
    }
  }
}



/**
 * Page content
 */
.page-content {
  padding: $spacing-unit 0;
  flex: 1 0 auto;
  text-align: justify;
}

.page-heading {
  @include relative-font-size(2);
}

.post-list-heading {
  @include relative-font-size(1.75);
}

.post-list {
  margin-left: 0;
  list-style: none;
  text-align: left;
  padding: 10px;
  width: 500px;
  > li {
    margin-bottom: $spacing-unit;
  }
}

.post-meta {
  font-size: $small-font-size;
  color: $brand-color;
}

.post-link {
  display: block;
  @include relative-font-size(1.5);
}

h4{
  margin-bottom: 0px;
}


.table {
  display:table;
  width:100%;
}
.tr {
  display:table-row;
}
.d1 {
  font-size: $small-font-size;
  color: $brand-color;
  display:table-cell;
  text-align:right;
  width:25%;
  
}
.d2 {
  display:table-cell;
  text-align:left;
  width:75%;
}


img[src*='#center'] { 
  display: block;
  margin: auto;
}

/**
* TABLE WRAPPERS
*/

.table-wrapper {
  overflow-x: scroll;
  font-size: 0.8em;
}


/**
 * Posts
 */
.post-header {
  margin-bottom: $spacing-unit;
}

.category-head {
  text-indent: 2em;
}

.post-title,
.post-content h1 {
  @include relative-font-size(2.625);
  letter-spacing: -1px;
  line-height: 1.15;

  @media screen and (min-width: $on-large) {
    @include relative-font-size(2.625);
  }
}

.post-content {
  margin-bottom: $spacing-unit;

  h1, h2, h3 { margin-top: $spacing-unit * 2 }
  h4, h5, h6 { margin-top: $spacing-unit }

  h2 {
    @include relative-font-size(1.75);

    @media screen and (min-width: $on-large) {
      @include relative-font-size(2);
    }
  }

  h3 {
    @include relative-font-size(1.375);

    @media screen and (min-width: $on-large) {
      @include relative-font-size(1.625);
    }
  }

  h4 {
    @include relative-font-size(1.25);
  }

  h5 {
    @include relative-font-size(1.125);
  }
  h6 {
    @include relative-font-size(1.0625);
  }
}

.PageNavigation {
  font-size: 14px;
  display: block;
  width: auto;
  overflow: hidden;
}

.PageNavigation a {
  display: block;
  width: 50%;
  float: left;
  margin: 1em 0;
}

.PageNavigation .next {
  text-align: right;
}


.PageNavigation .previous {
  text-align: left;
}


.social-media-list {
  display: table;
  margin: 0 auto;
  li {
    float: left;
    margin: 5px 10px 5px 0;
    &:last-of-type { margin-right: 0 }
    a {
      display: block;
      padding: $spacing-unit / 4;
      border: 1px solid $border-color-01;
      &:hover { border-color: $border-color-02 }
    }
  }
}



/**
 * Pagination navbar
 */
.pagination {
  margin-bottom: $spacing-unit;
  @extend .social-media-list;
  li {
    a, div {
      min-width: 41px;
      text-align: center;
      box-sizing: border-box;
    }
    div {
      display: block;
      padding: $spacing-unit / 4;
      border: 1px solid transparent;

      &.pager-edge {
        color: $border-color-01;
        border: 1px dashed;
      }
    }
  }
}



/**
 * Grid helpers
 */
@media screen and (min-width: $on-large) {
  .one-half {
    width: calc(50% - (#{$spacing-unit} / 2));
  }
}


/* -----
SVG Icons - svgicons.sparkk.fr
----- */

.svg-icon {
  width: 1.25em;
  height: 1.25em;
}

.svg-icon path,
.svg-icon polygon,
.svg-icon rect {
  fill: #000000bd;
}

.svg-icon circle {
  stroke: #000000;
  stroke-width: 1;
}

@media screen and (max-width: 767px) {
  input, select, textarea {
    font-size: 16px !important;
  }
}





/*
	The following mixin is taken and edited from this pen - https://codepen.io/hugo/pen/xzjGB
	I have added outlineColor to allow the addition of a text-shadow outline for the text.
 */

 @function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}


@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@mixin shade($type, $color: #3498db, $borderColor: #fff, $depth: 20, $angle: 135deg, $long: false, $fade: false) {
    $angle: ($angle - 90);
    $x: 1.1 * cos($angle) + 0px;
    $y: 1.1 * sin($angle) + 0px;
    $darken: (lightness($color)/$depth)/2;
    $opacify: 0;
    $shadow: ();

    @if $long == true{
      $darken:0;
    }

    @if $fade == true {
      $opacify: (opacity($color)/$depth) ;
        // added this for rendering in some browsers, remove if you like.
      @include translateZ(0);
    }

    @for $i from 1 through $depth {
      $shadow: $shadow, $i*$x $i*$y 0 hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));
    }
    #{$type}-shadow:  1.5px 1.5px 0 $borderColor,
                      0px 1.5px 0 $borderColor,
                      -1.5px -1.5px 0 $borderColor,
                      -1.5px -1.5px 0 $borderColor,
                      -1.5px 1.5px 0 $borderColor,
                       1.5px -1.5px 0 $borderColor,
                       $shadow;
}

//mixin to provide just a basic outline for the text
@mixin outline($color: #fff) {
	text-shadow: 1.5px 1.5px 0 $color,
    			 -1.5px -1.5px 0 $color,
    			 -1.5px -1.5px 0 $color,
    			 -1.5px 1.5px 0 $color,
    			 1.5px -1.5px 0 $color;
}


// Define the fonts used in the Pen
@import url(https://fonts.googleapis.com/css?family=Francois+One);
@import url(https://fonts.googleapis.com/css?family=PT+Sans);

// Define the colors
$pink		: #f89bb4;
$pinkPastel	: #ebaca5;
$pinkDark	: #e62915;
$pinkGrayed	: #d38076;

$grayLight	: #cac6c5;
$offWhite	: #e7e7e7;


// Outer heading wrapper (for descriptions, not for the actual effects)
.headingOuter {
	background: #f1f1f1;
	text-align: center;
	margin-top: 30px;
	border-top: 1px solid #333;
	border-bottom: 1px solid #333;

	&:first-child {
		margin-top: 0;
	}
  h1 + & {
    margin-top: 10px;
  }
}
.headingWrapper {
	text-align: center;
	background-color: #fff;
	padding: 10px;
}

// default header class â€“ used on all examples
.header {
	display: inline-block;
	text-align: center;
	font-family: 'Francois One', Helvetica, Arial, sans-serif;
	font-size: 96px;
	color: $offWhite;
	text-decoration: none;

	@include outline($grayLight);

	transition: all 400ms ease-in-out;
}

// effect for pushing the text down onto the page
// default is the letters emerging from the page and merging back down on hover
.header--pushDown {
	@include shade(text, #aaa, #333, 10, 135deg, true);

	&:hover {
		transform: translate(9px, 9px);
		@include outline($grayLight);
	}
}

// raising text from page when hovered, so flipped state to header--pushDown class
.header--raiseUp {
	&:hover {
		transform: translate(-9px, -9px);
		@include shade(text, #aaa, #333, 10, 135deg, true);
	}
}

// creates a shadow effect, rather than a raised lettering effect
// simply by adjusting the translate position a little
.header--shadow {
	&:hover {
		transform: translate(5px, 0);
	}

	&.header--raiseUp {
		&:hover {
			transform: translate(-5px, 0);
		}
	}
}


//Brighter colored text
.color-bright {
	background-color: $pinkPastel;

	& .header {
		color: $pink;
		@include outline($pinkGrayed);
	}
	
	//push down text
	& .header--pushDown {
		@include shade(text, $pinkDark, #fff, 10, 135deg, true);

		&:hover {
			@include outline($pinkGrayed);
		}
	}

	//raise up text
	& .header--raiseUp:hover {
		@include shade(text, $pinkDark, #fff, 10, 135deg, true);
	}
}

// SVG Pattern text effect
// Same as the above but with a pattern text effect on hover
// Played around with this for a while â€“ cannot be done with background clip and a CSS gradient as the
// text-shadow always appears in front of the background (unless you have no background color on the wrapping element)
// Therefore, use SVG linearGradient and animate the stop points using CSS
svg {
	line-height: 1.2;
	width: 410px;
	height: 1.5em;
}
.header--svg {
	text,
	stop {
		transition: all 350ms ease-in-out;
	}
	text {
		text-transform: uppercase;
		fill: url(#striped);
		@include outline($grayLight);
	}
	&:hover text {
		@include shade(text, #aaa, #333, 10, 135deg, true);
	}

	//animate gradient stop points
	& stop {
		stop-color: $offWhite;
	}
	&:hover stop {
		stop-color: #fff;

		&:nth-child(2),
		&:nth-child(3) {
			stop-color: $pinkGrayed;
		}
	}
}


// Brighter version of the SVG pattern text
.color-bright {
	& .header--svg {
		text {
			fill: url(#stripedColor);
			@include outline($pinkGrayed);
		}
		&:hover text {
			@include shade(text, $pinkDark, #fff, 10, 135deg, true);
		}
	}
	& stop {
		stop-color: $pink;
	}
	& .header--svg:hover stop {
		&:nth-child(2),
		&:nth-child(3) {
			stop-color: #ed5751;
		}
	}
}



